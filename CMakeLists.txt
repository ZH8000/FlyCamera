cmake_minimum_required( VERSION 2.8 )
project( app )

find_package( OpenCV REQUIRED )
#find_package( GTK2 REQUIRED gtk )
find_package( PythonLibs REQUIRED )

#find_package(PkgConfig REQUIRED)
#pkg_check_modules(GTK2 REQUIRED gtk+-2.0)
#include_directories(${GTK2_INCLUDE_DIRS})
#link_directories(${GTK2_LIBRARY_DIRS})
#add_definitions(${GTK2_CFLAGS_OTHER})

set( FLYCAP_INCLUDE "/usr/include/flycapture" )
include_directories( ${FLYCAP_INCLUDE} )
include_directories(${PYTHON_INCLUDE_DIRS})

#add_executable( app FlyCamera.cpp )
#add_executable( app AlexMatch.cpp )
#add_executable( app AlexMatch_MultiCamera.cpp )
add_executable( app AlexMatch_MultiCamera_v2.cpp CommonFlySDK.cpp )
#add_executable( app WebCamera.cpp webcam.cpp)
#add_executable( app LineAndCircle.cpp )
#add_executable( app findContours.cpp)
#add_executable( app FindContours.cpp)
#add_executable( app pointPolygonTest.cpp )
#add_executable( app morphology.cpp)

#add_executable( app 2_Circles_v2.cpp)
#add_executable( app 2_Circles_v3.cpp)
#add_executable( app 2_Circles_v3_head.cpp)
#add_executable( app 3_Lines.cpp)
#add_executable( app calcHist_Demo.cpp )
#add_executable( app 2_Circles_v4_head_tail.cpp CommonFlySDK.cpp )

#add_executable( app hull_demo.cpp )
#add_executable( app generalContours_demo1.cpp )
#add_executable( app testGTK.cpp )

#add_executable( app MultipleCameraEx.cpp )
#add_executable( app MultipleCameraTest.cpp )
#add_executable( app MultipleCameraTest2.cpp CommonFlySDK.cpp)
#add_executable( app forDemo.cpp )
#add_executable( app AlexMatch_MultiCamera_v3.cpp CommonFlySDK.cpp )

#add_executable( app HoughLinesP.cpp )
#add_executable( app Histogram.cpp )
#add_executable( app segment_objects.cpp )
#add_executable( app AsyncTriggerEx.cpp )

#add_executable( app gpio_led.cpp )
#add_executable( app Trigger_hardware.cpp )
#add_executable( app FireTrigger.cpp )
#add_executable( app gpio_new.cpp )

SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11" )
#SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall" )

target_link_libraries( app ${OpenCV_LIBS} ${PYTHON_LIBRARIES} -lflycapture tesseract )
#target_link_libraries( app ${OpenCV_LIBS} -lflycapture tesseract ${GTK2_LIBRARIES} )
